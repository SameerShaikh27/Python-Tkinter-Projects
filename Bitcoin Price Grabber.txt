from tkinter import *
from bs4 import BeautifulSoup
import urllib
from urllib import request
from datetime import datetime

root = Tk()

root.geometry("700x300")
root.title("Bitcoin Price Grabber")
root.config(background="black")

# Previous = False means that we do not have previous data
global previous
previous = False

# Getting the current time
now = datetime.now()
current_time = now.strftime("%I:%M:%S %p")

# Creating a frame to input all our widget into that
frame = Frame(root, bg="black")
frame.pack(pady=20)

# Defining the image that we are going to use as logo
logo = PhotoImage(file="gimp/bitcoin.png")

l_logo = Label(frame, image=logo, bd=0)
l_logo.grid(row=0, column=0, rowspan=2)

# Adding Bitcoin Price Label
l_bitcoinPrice = Label(frame, text="", font="Cooper 50 bold", fg="#eeae2a", bg="black", bd=0)
l_bitcoinPrice.grid(row=0, column=1, sticky="s")

# Latest Price Label UP/DOWN
l_latestPrice = Label(frame, text="", font="Cooper 12 bold", fg="blue", bg="black", bd=0)
l_latestPrice.grid(row=1, column=1, sticky="n")


def update():
    global previous

    # Grabbing the Bitcoin Price through web page
    page = urllib.request.urlopen("https://www.coindesk.com/price/bitcoin").read()
    # Here with the help of BeautifulSoup we are grabbing the WebPage
    # And "html.parser" is used to break down WebPage into html code
    html = BeautifulSoup(page, "html.parser")
    # Here we are finding the HTML class_ called "price-large" where price of Bitcoin is hidden
    price_large = html.find(class_="price-large")
    # Converting the price_large to string so that we can slice it
    price_large1 = str(price_large)
    # Grabbing the price by slicing price_large1
    price_large2 = price_large1[54:63]

    # Updating the price of bitcoin to the screen
    l_bitcoinPrice.config(text=f"${price_large2}")

    # Update the price after every 1 minute
    # 1 second = 1000 mile-second
    root.after(60000, update)

    # Getting the current time
    now = datetime.now()
    current_time = now.strftime("%I:%M:%S %p")

    # Updating the status bar
    l_statusBar.config(text=f"Last Updated: {current_time}    ")

    # Determining that the price has changed from it's last price by grabbing the current price
    current = price_large2
    # Removing the commas for maths purpose
    current = current.replace(',', '')

    if previous:
        if float(previous) > float(current):
            l_latestPrice.config(text=f"Price is down by {round(float(previous) - float(current), 2)}", fg="red")

        elif float(previous) == float(current):
            l_latestPrice.config(text="Price Unchanged", fg="blue")

        else:
            l_latestPrice.config(text=f"Price is up by {round(float(current) - float(previous), 2)}", fg="green")
    
    # This is what we are going to see when we open the screen for the first time
    else:
        previous = current
        l_latestPrice.config(text="Price Unchanged", fg="blue")


# Creating a status bar to display the current time
l_statusBar = Label(root, text=f"Last updated: {current_time}", bd=0, anchor="e", bg="black", fg="white")
l_statusBar.pack(fill=X, side=BOTTOM, ipady=2, padx=20)


update()
root.mainloop()


